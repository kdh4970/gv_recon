// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mesh.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_mesh_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_mesh_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_mesh_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_mesh_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_mesh_2eproto;
class Mesh;
struct MeshDefaultTypeInternal;
extern MeshDefaultTypeInternal _Mesh_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class Mesh final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:Mesh) */ {
 public:
  inline Mesh() : Mesh(nullptr) {}
  ~Mesh() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Mesh(
      ::google::protobuf::internal::ConstantInitialized);

  inline Mesh(const Mesh& from) : Mesh(nullptr, from) {}
  inline Mesh(Mesh&& from) noexcept
      : Mesh(nullptr, std::move(from)) {}
  inline Mesh& operator=(const Mesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh& operator=(Mesh&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Mesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const Mesh* internal_default_instance() {
    return reinterpret_cast<const Mesh*>(
        &_Mesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Mesh& a, Mesh& b) { a.Swap(&b); }
  inline void Swap(Mesh* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Mesh* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Mesh>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Mesh& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Mesh& from) { Mesh::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Mesh* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "Mesh"; }

 protected:
  explicit Mesh(::google::protobuf::Arena* arena);
  Mesh(::google::protobuf::Arena* arena, const Mesh& from);
  Mesh(::google::protobuf::Arena* arena, Mesh&& from) noexcept
      : Mesh(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kVerticesFieldNumber = 2,
    kTrianglesFieldNumber = 3,
    kClassInfoFieldNumber = 1,
  };
  // repeated float vertices = 2;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;

  public:
  void clear_vertices() ;
  float vertices(int index) const;
  void set_vertices(int index, float value);
  void add_vertices(float value);
  const ::google::protobuf::RepeatedField<float>& vertices() const;
  ::google::protobuf::RepeatedField<float>* mutable_vertices();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_vertices() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_vertices();

  public:
  // repeated int32 triangles = 3;
  int triangles_size() const;
  private:
  int _internal_triangles_size() const;

  public:
  void clear_triangles() ;
  ::int32_t triangles(int index) const;
  void set_triangles(int index, ::int32_t value);
  void add_triangles(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& triangles() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_triangles();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_triangles() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_triangles();

  public:
  // string class_info = 1;
  void clear_class_info() ;
  const std::string& class_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_class_info(Arg_&& arg, Args_... args);
  std::string* mutable_class_info();
  PROTOBUF_NODISCARD std::string* release_class_info();
  void set_allocated_class_info(std::string* value);

  private:
  const std::string& _internal_class_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_info(
      const std::string& value);
  std::string* _internal_mutable_class_info();

  public:
  // @@protoc_insertion_point(class_scope:Mesh)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      23, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<float> vertices_;
    ::google::protobuf::RepeatedField<::int32_t> triangles_;
    mutable ::google::protobuf::internal::CachedSize _triangles_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr class_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mesh_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Mesh

// string class_info = 1;
inline void Mesh::clear_class_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_info_.ClearToEmpty();
}
inline const std::string& Mesh::class_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:Mesh.class_info)
  return _internal_class_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Mesh::set_class_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:Mesh.class_info)
}
inline std::string* Mesh::mutable_class_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_class_info();
  // @@protoc_insertion_point(field_mutable:Mesh.class_info)
  return _s;
}
inline const std::string& Mesh::_internal_class_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.class_info_.Get();
}
inline void Mesh::_internal_set_class_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_info_.Set(value, GetArena());
}
inline std::string* Mesh::_internal_mutable_class_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.class_info_.Mutable( GetArena());
}
inline std::string* Mesh::release_class_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:Mesh.class_info)
  return _impl_.class_info_.Release();
}
inline void Mesh::set_allocated_class_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class_info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.class_info_.IsDefault()) {
          _impl_.class_info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Mesh.class_info)
}

// repeated float vertices = 2;
inline int Mesh::_internal_vertices_size() const {
  return _internal_vertices().size();
}
inline int Mesh::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh::clear_vertices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vertices_.Clear();
}
inline float Mesh::vertices(int index) const {
  // @@protoc_insertion_point(field_get:Mesh.vertices)
  return _internal_vertices().Get(index);
}
inline void Mesh::set_vertices(int index, float value) {
  _internal_mutable_vertices()->Set(index, value);
  // @@protoc_insertion_point(field_set:Mesh.vertices)
}
inline void Mesh::add_vertices(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vertices()->Add(value);
  // @@protoc_insertion_point(field_add:Mesh.vertices)
}
inline const ::google::protobuf::RepeatedField<float>& Mesh::vertices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Mesh.vertices)
  return _internal_vertices();
}
inline ::google::protobuf::RepeatedField<float>* Mesh::mutable_vertices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Mesh.vertices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vertices();
}
inline const ::google::protobuf::RepeatedField<float>& Mesh::_internal_vertices()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vertices_;
}
inline ::google::protobuf::RepeatedField<float>* Mesh::_internal_mutable_vertices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vertices_;
}

// repeated int32 triangles = 3;
inline int Mesh::_internal_triangles_size() const {
  return _internal_triangles().size();
}
inline int Mesh::triangles_size() const {
  return _internal_triangles_size();
}
inline void Mesh::clear_triangles() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.triangles_.Clear();
}
inline ::int32_t Mesh::triangles(int index) const {
  // @@protoc_insertion_point(field_get:Mesh.triangles)
  return _internal_triangles().Get(index);
}
inline void Mesh::set_triangles(int index, ::int32_t value) {
  _internal_mutable_triangles()->Set(index, value);
  // @@protoc_insertion_point(field_set:Mesh.triangles)
}
inline void Mesh::add_triangles(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_triangles()->Add(value);
  // @@protoc_insertion_point(field_add:Mesh.triangles)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Mesh::triangles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:Mesh.triangles)
  return _internal_triangles();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Mesh::mutable_triangles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:Mesh.triangles)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_triangles();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Mesh::_internal_triangles()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.triangles_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Mesh::_internal_mutable_triangles() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.triangles_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_mesh_2eproto_2epb_2eh
